name: Tauri Release

on:
  push:
    tags:
      - v* # Trigger on version tags like v1.0.0

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target aarch64-apple-darwin
          - platform: macos-latest
            args: --target x86_64-apple-darwin

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install frontend dependencies
        run: npm install

      - name: Write .env file
        run: echo "${{ secrets.FLIPPIO }}" > .env

      - name: Sign source binaries (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üîê Signing libimobiledevice binaries at source..."
          node scripts/sign-source-binaries.js "${{ secrets.APPLE_SIGNING_IDENTITY }}"

          # Verify signatures were applied
          echo "üîç Verifying source signatures..."
          for tool in idevice_id ideviceinfo ideviceinstaller afcclient; do
            if codesign -dv "resources/libimobiledevice/tools/$tool" 2>&1 | grep -q "Developer ID"; then
              echo "‚úÖ $tool properly signed"
            else
              echo "‚ùå $tool signature failed"
              exit 1
            fi
          done

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: Flippio v__VERSION__
          releaseBody: See the assets to download this version and install.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Verify and fix bundled signatures (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Find the app bundle
          if [[ "${{ matrix.args }}" == *"aarch64-apple-darwin"* ]]; then
            APP_PATH="src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Flippio.app"
          elif [[ "${{ matrix.args }}" == *"x86_64-apple-darwin"* ]]; then
            APP_PATH="src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Flippio.app"
          else
            APP_PATH="src-tauri/target/release/bundle/macos/Flippio.app"
          fi

          if [ -d "$APP_PATH" ]; then
            echo "üîç Checking bundled binary signatures..."

            # Find where Tauri placed the binaries
            BUNDLED_TOOLS_PATH=""
            for possible_path in \
              "$APP_PATH/Contents/Resources/_up_/resources/libimobiledevice/tools" \
              "$APP_PATH/Contents/Resources/resources/libimobiledevice/tools" \
              "$APP_PATH/Contents/Resources/libimobiledevice/tools"; do
              if [ -d "$possible_path" ]; then
                BUNDLED_TOOLS_PATH="$possible_path"
                echo "üìÅ Found bundled tools at: $BUNDLED_TOOLS_PATH"
                break
              fi
            done

            if [ -n "$BUNDLED_TOOLS_PATH" ]; then
              # Check and re-sign if necessary
              for tool in idevice_id ideviceinfo ideviceinstaller afcclient; do
                tool_path="$BUNDLED_TOOLS_PATH/$tool"
                if [ -f "$tool_path" ]; then
                  if ! codesign -dv "$tool_path" 2>&1 | grep -q "Developer ID"; then
                    echo "‚ö†Ô∏è $tool not properly signed, re-signing..."
                    codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --options runtime --timestamp "$tool_path"
                  else
                    echo "‚úÖ $tool signature preserved"
                  fi
                fi
              done

              # Also check dylibs in Frameworks
              FRAMEWORKS_PATH="$APP_PATH/Contents/Frameworks"
              if [ -d "$FRAMEWORKS_PATH" ]; then
                echo "üîç Checking framework signatures..."
                for dylib in "$FRAMEWORKS_PATH"/*.dylib; do
                  if [ -f "$dylib" ]; then
                    if ! codesign -dv "$dylib" 2>&1 | grep -q "Developer ID"; then
                      echo "‚ö†Ô∏è $(basename "$dylib") not properly signed, re-signing..."
                      codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --options runtime --timestamp "$dylib"
                    else
                      echo "‚úÖ $(basename "$dylib") signature preserved"
                    fi
                  fi
                done
              fi

              # Final app re-signing
              echo "üîê Final app bundle signing..."
              codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --options runtime --timestamp "$APP_PATH"

              # Deep verification
              echo "üîç Deep verification..."
              codesign --verify --deep --verbose "$APP_PATH"
              echo "‚úÖ App bundle verification complete"
            else
              echo "‚ùå Could not find bundled tools directory"
              exit 1
            fi
          else
            echo "‚ùå App bundle not found at: $APP_PATH"
            exit 1
          fi
