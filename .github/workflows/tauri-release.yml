name: Tauri Release

on:
  push:
    tags:
      - v* # Trigger on version tags like v1.0.0

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target aarch64-apple-darwin
          - platform: macos-latest
            args: --target x86_64-apple-darwin

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install frontend dependencies
        run: npm install

      - name: Write .env file
        run: echo "${{ secrets.FLIPPIO }}" > .env

      - name: Build and release Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: Flippio v__VERSION__
          releaseBody: See the assets to download this version and install.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Sign bundled binaries (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # Find the app bundle created by Tauri action
          if [[ "${{ matrix.args }}" == *"aarch64-apple-darwin"* ]]; then
            APP_PATH="src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Flippio.app"
          elif [[ "${{ matrix.args }}" == *"x86_64-apple-darwin"* ]]; then
            APP_PATH="src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Flippio.app"
          else
            APP_PATH="src-tauri/target/release/bundle/macos/Flippio.app"
          fi

          # Sign bundled libimobiledevice binaries if they exist
          if [ -d "$APP_PATH" ]; then
            echo "üîê Signing bundled libimobiledevice binaries..."
            node scripts/sign-bundled-binaries.js "$APP_PATH" "${{ secrets.APPLE_SIGNING_IDENTITY }}" || echo "‚ö†Ô∏è No bundled binaries found or signing failed"

            # Re-sign the main app after signing bundled binaries
            echo "üîê Re-signing main app bundle..."
            codesign --force --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" --options runtime --timestamp "$APP_PATH"

            # Verify the final signature
            codesign --verify --deep --verbose "$APP_PATH"
            echo "‚úÖ App bundle signature verified"
          else
            echo "‚ö†Ô∏è App bundle not found at: $APP_PATH"
          fi
